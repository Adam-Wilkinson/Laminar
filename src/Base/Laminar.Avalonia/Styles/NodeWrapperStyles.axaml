<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:n="clr-namespace:Laminar.Avalonia.NodeDisplaySystem;assembly=Laminar.Avalonia"
		xmlns:con="clr-namespace:Laminar.PluginFramework.NodeSystem.Contracts.Connectors;assembly=Laminar.PluginFramework"
		xmlns:nod="clr-namespace:Laminar.PluginFramework.NodeSystem.Contracts;assembly=Laminar.PluginFramework"
		xmlns:ui="clr-namespace:Laminar.Contracts.Base.UserInterface;assembly=Laminar.Contracts"
		xmlns:mycontrols="clr-namespace:Laminar.Avalonia.Controls;assembly=Laminar.Avalonia">
	<Design.PreviewWith>
		<Border>
			<n:NodeWrapperDisplay>
				<n:NodeWrapperDisplay.CoreNode>
					<n:TestNodeWrapper/>
				</n:NodeWrapperDisplay.CoreNode>
			</n:NodeWrapperDisplay>
		</Border>
	</Design.PreviewWith>

	<Style Selector="n|NodeWrapperDisplay">
		<Setter Property="ClipToBounds" Value="False"/>
		<Setter Property="Template">
			<ControlTemplate>
				<Border Name="OuterBorder"
						ZIndex="0"
						BorderThickness="1"
						Background="{DynamicResource HeaderColour}"
						ClipToBounds="False">

					<Border.DataTemplates>

						<DataTemplate DataType="{x:Type con:IIOConnector}">
							<n:ConnectorControl 
								Connector="{Binding}"
								  Width="13"
								  Height="18"
								  Data="M 2,0 2,14 12,7 2,0 z"
								  StrokeThickness="1.5"
								  Stroke="{DynamicResource ThemeBorderLowBrush}"
								  Fill="{Binding ColorHex}"/>
						</DataTemplate>

						<DataTemplate DataType="{x:Type ui:IDisplay}">
							<mycontrols:ChildDataContextController 
								Padding="5,0"
								Child="{Binding Interface}"
								ChildDataContext="{Binding Value}"/>
						</DataTemplate>

						<DataTemplate DataType="{x:Type nod:INodeRow}">
							<Panel>
								<ContentControl Content="{Binding InputConnector}"
												HorizontalAlignment="Left"
												RenderTransform="translate(-15px,0)"/>
								<ContentControl Content="{Binding CentralDisplay}"/>
								<ContentControl Content="{Binding OutputConnector}"
												HorizontalAlignment="Right"
												RenderTransform="translate(15px,0)"/>
							</Panel>
						</DataTemplate>
					</Border.DataTemplates>

					<Panel>
						<Rectangle Classes="Highlight"
								   HorizontalAlignment="Stretch"
								   VerticalAlignment="Stretch"
								   Fill="White"
								   ZIndex="-10">
							<Rectangle.Transitions>
								<Transitions>
									<DoubleTransition Property="Opacity" Duration="0:0:0.05"/>
								</Transitions>
							</Rectangle.Transitions>
						</Rectangle>

						<StackPanel ClipToBounds="False" Opacity="1">
							<ContentPresenter Padding="12,6"
												Content="{Binding CoreNode.NameRow, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Border Background="#3e3e3e"
									MinWidth="150"
									ClipToBounds="False"
									Padding="10"
									Margin="0,3">
								<ItemsPresenter Classes="NodeDisplay"
												Items="{Binding CoreNode.Rows, RelativeSource={RelativeSource TemplatedParent}}">
									<ItemsPresenter.ItemsPanel>
										<ItemsPanelTemplate>
											<StackPanel Spacing="10"/>
										</ItemsPanelTemplate>
									</ItemsPresenter.ItemsPanel>
								</ItemsPresenter>
							</Border>
						</StackPanel>
					</Panel>
				</Border>
			</ControlTemplate>
		</Setter>
	</Style>

	<Style Selector="n|NodeWrapperDisplay:not(:pointerover) :is(Control).Highlight">
		<Setter Property="Opacity" Value="0"/>
	</Style>

	<Style Selector="n|NodeWrapperDisplay:pointerover :is(Control).Highlight">
		<Setter Property="Opacity" Value="0.1"/>
	</Style>

	<Style Selector="n|NodeWrapperDisplay[(n|Selection.Selected)=true] > Border#OuterBorder">
		<Setter Property="BorderBrush" Value="#EEEEEEFF"/>
	</Style>

	<Style Selector="n|NodeWrapperDisplay > Border#OuterBorder">
		<Setter Property="BorderBrush" Value="#00000000"/>
	</Style>
</Styles>