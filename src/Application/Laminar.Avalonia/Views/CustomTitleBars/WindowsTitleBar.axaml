<titlebars:LaminarTitleBar xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:s="using:System"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:titlebars="using:Laminar.Avalonia.Views.CustomTitleBars"
			 xmlns:localshapes="using:Laminar.Avalonia.Shapes"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             SidebarState="Closed"
             x:Class="Laminar.Avalonia.Views.CustomTitleBars.WindowsTitleBar">
  <StackPanel>
	  <Grid Height="40">
		  <DockPanel IsHitTestVisible="False"
					Name="TitleBarBackground">
			  <DockPanel.Background>
				  <LinearGradientBrush StartPoint="0,0" EndPoint="0,180">
					  <GradientStop Offset="0" Color="{DynamicResource LaminarSecondary}"/>
					  <GradientStop Offset="5" Color="{DynamicResource LaminarAccent}"/>
				  </LinearGradientBrush>
			  </DockPanel.Background>
			  <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Spacing="5">
				  <TextBlock Name="ProjectText"
							 Text="Project:"
							 FontSize="20"
							 FontWeight="UltraBold"
							 VerticalAlignment="Center"
							 IsHitTestVisible="False"/>
				  <TextBlock Text="Laminar"
							 FontSize="20"
							 FontWeight="Light"
							 VerticalAlignment="Center"
							 IsHitTestVisible="False"/>
			  </StackPanel>
		  </DockPanel>
		  <DockPanel>
			<StackPanel Orientation="Horizontal"
						VerticalAlignment="Stretch"
						DockPanel.Dock="Left">
				<Button VerticalAlignment="Stretch" Background="#00000000" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Stretch" Name="LaminarButton" ClipToBounds="False">
					<Panel Margin="3,0,0,0" Width="28">
						<Image Source="/Assets/ProjectLaminarLogo.png"
						       Height="28"
						       Width="28"
						       IsHitTestVisible="False"
						       VerticalAlignment="Center"
						       Name="LaminarLogo"/>
						<Path HorizontalAlignment="Center" Name="CloseSidebarHint" Data="M 0 0 L -2 8 L 0 16" Stroke="{DynamicResource LaminarForeground}" StrokeThickness="2" Height="16" ClipToBounds="False"/>
						<Path HorizontalAlignment="Center" Name="ExpandSidebarHint" Data="M 0 0 L 2 8 L 0 16" Stroke="{DynamicResource LaminarForeground}" StrokeThickness="2" Height="16" ClipToBounds="False"/>
					</Panel>
				</Button>
				<Menu VerticalAlignment="Stretch">
					<Menu.Styles>
						<Style Selector=":is(MenuItem)">
							<Setter Property="FontSize" Value="15"/>
							<Setter Property="FontWeight" Value="DemiBold"/>
							<Setter Property="VerticalAlignment" Value="Stretch"/>
						</Style>
					</Menu.Styles>
					<MenuItem Header="File"/>
					<MenuItem Header="Edit"/>
					<MenuItem Header="View"/>
				</Menu>
			</StackPanel>
			  
			<StackPanel HorizontalAlignment="Right"
						DockPanel.Dock="Right"
						Orientation="Horizontal">
			
				<StackPanel.Styles>
					<Style Selector="Button">
						<Setter Property="VerticalAlignment" Value="Stretch"/>
						<Setter Property="VerticalContentAlignment" Value="Center"/>
						<Setter Property="Padding" Value="5"/>
						<Setter Property="Width" Value="46"/>
						<Setter Property="BorderThickness" Value="0"/>
					</Style>
					<Style Selector="Button:not(:pointerover) /template/ ContentPresenter#PART_ContentPresenter">
						<Setter Property="Background" Value="Transparent"/>
					</Style>
					<Style Selector="Path">
						<Setter Property="Stretch" Value="Uniform"/>
						<Setter Property="Margin" Value="10"/>
						<Setter Property="Stroke" Value="{DynamicResource LaminarForeground}"/>
						<Setter Property="StrokeThickness" Value="2"/>
					</Style>
				</StackPanel.Styles>

				<ToggleButton Name="SettingsButton"
						Classes="SettingsButton"
						ToolTip.Tip="Settings"
						HorizontalContentAlignment="Center"
						VerticalContentAlignment="Center"
						VerticalAlignment="Stretch"
						Margin="0,0,20,0"
						HotKey="Ctrl+Alt+S">
					<Panel>
						<localshapes:SettingsCog Classes="SettingsCog" Width="19" Height="19" SpokeDepth="4.5" SpokeCount="8" Stroke="{DynamicResource LaminarForeground}" StrokeThickness="1.5"/>
						<Border Classes="SettingsArrowRotater">
							<Path Classes="SettingsArrow" Data="M 0 0 L 3 1 L 6 0" Height="20" Width="17" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" StrokeThickness="1.5"/>
						</Border>
					</Panel>
				</ToggleButton>
				
				<Button Name="SystemTrayButton"
						ToolTip.Tip="Minimize to System Tray">
					<Path Data="M-1,0 v2 h-4 M-2,0"/>
				</Button>
			
				<Button Name="MinimizeButton"
						ToolTip.Tip="Minimize">
				  <Path Data="M0,1 h-2 v0.065 h2 z"/>
				</Button>

				<Button Name="MaximizeButton">
				  <ToolTip.Tip>
					<ToolTip Content="Maximize"
							 Name="MaximizeToolTip"/>
				  </ToolTip.Tip>
				  <Path Name="MaximizeIcon"/>
				</Button>

			  <Button Name="CloseButton"
					  ToolTip.Tip="Close">
				<Button.Styles>
				  <Style Selector="Button:pointerover /template/ ContentPresenter#PART_ContentPresenter">
					<Setter Property="Background" Value="Red"/>
				  </Style>
				</Button.Styles>
				<Path Data="M1,1 L-1,-1 M-1,1 L1,-1"></Path>
			  </Button>

			</StackPanel>
		  </DockPanel>
	  </Grid>
	  
	  <StackPanel.Resources>
		  <ResourceDictionary>
			  <Easing x:Key="SettingsButtonEasing">QuadraticEaseInOut</Easing>
			  <s:TimeSpan x:Key="SettingsButtonDuration">0:0:0.3</s:TimeSpan>
		  </ResourceDictionary>
	  </StackPanel.Resources>
	  
	  <StackPanel.Styles>
		  <Style Selector="ToggleButton.SettingsButton">
			  <Setter Property="Background" Value="Transparent"/>
			  <Style Selector="^ :is(Shape).SettingsCog">
				  <Setter Property="Fill" Value="Transparent"/>
				  <Setter Property="RenderTransform" Value="rotate(0) scale(1.1)"/>
				  <Setter Property="Transitions">
					  <Transitions>
						  <TransformOperationsTransition Easing="{DynamicResource SettingsButtonEasing}" Duration="{DynamicResource SettingsButtonDuration}" Property="RenderTransform"/>
						  <BrushTransition Easing="{DynamicResource SettingsButtonEasing}" Duration="{DynamicResource SettingsButtonDuration}" Property="Fill"/>
					  </Transitions>
				  </Setter>
			  </Style>
			  <Style Selector="^ :is(Control).SettingsArrow">
				  <Setter Property="Opacity" Value="0"/>
				  <Setter Property="RenderTransform" Value="translatey(20px)"/>
				  <Setter Property="Transitions">
					  <Transitions>
						  <TransformOperationsTransition Easing="{DynamicResource SettingsButtonEasing}" Duration="{DynamicResource SettingsButtonDuration}" Property="RenderTransform"/>
						  <DoubleTransition Easing="{DynamicResource SettingsButtonEasing}" Duration="{DynamicResource SettingsButtonDuration}" Property="Opacity"/>
					  </Transitions>
				  </Setter>
			  </Style>
			  <Style Selector="^ :is(Control).SettingsArrowRotater">
				  <Setter Property="RenderTransform" Value="rotate(0deg)"/>
				  <Setter Property="Transitions">
					  <Transitions>
						  <TransformOperationsTransition Easing="{DynamicResource SettingsButtonEasing}" Duration="{DynamicResource SettingsButtonDuration}" Property="RenderTransform"/>
					  </Transitions>
				  </Setter>				  
			  </Style>

			  <Style Selector="^:pointerover">
				  <Setter Property="Background" Value="Transparent"/>
				  <Style Selector="^ :is(Shape).SettingsCog">
					  <Setter Property="RenderTransform" Value="rotate(0) scale(1)"/>
					  <Setter Property="Fill" Value="{Binding $self.Stroke}"/>
				  </Style>

				  <Style Selector="^ :is(Control).SettingsArrow">
					  <Setter Property="Opacity" Value="1"/>
					  <Setter Property="RenderTransform" Value="translatey(22px)"/>
				  </Style>
			  </Style>
			  
			  <Style Selector="^:checked">
				  <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
					  <Setter Property="Background" Value="{DynamicResource LaminarAccent}"/>
				  </Style>
				  <Style Selector="^ :is(Shape).SettingsCog">
					  <Setter Property="Fill" Value="{Binding $self.Stroke}"/>
					  <Setter Property="RenderTransform" Value="rotate(20deg)"/>
				  </Style>
				  <Style Selector="^ :is(Control).SettingsArrow">
					  <Setter Property="Opacity" Value="1"/>
					  <Setter Property="RenderTransform" Value="translatey(22px)"/>
				  </Style>
				  <Style Selector="^ :is(Control).SettingsArrowRotater">
					  <Setter Property="RenderTransform" Value="rotate(180deg)"/>
				  </Style>
			  </Style>
		  </Style>
		  
		  <Style Selector=":is(Button)#LaminarButton">
			  <Setter Property="IsHitTestVisible" Value="False"/>
			  <Style Selector="^ Image#LaminarLogo">
				  <Setter Property="RenderTransform" Value="translatex(0)"/>
				  <Setter Property="Transitions">
					  <Transitions>
						  <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.3" Easing="QuadraticEaseInOut"/>
					  </Transitions>
				  </Setter>
			  </Style>
			  <Style Selector="^ Path">
				  <Setter Property="Opacity" Value="0"/>
				  <Setter Property="Transitions">
					  <Transitions>
						  <DoubleTransition Property="Opacity" Duration="0:0:0.3" Easing="QuadraticEaseInOut"/>
						  <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.3" Easing="QuadraticEaseInOut"/>
					  </Transitions>
				  </Setter>
				  <Style Selector="^#ExpandSidebarHint">
					  <Setter Property="RenderTransform" Value="translatex(10px)"/>
				  </Style>
				  <Style Selector="^#CloseSidebarHint">
					  <Setter Property="RenderTransform" Value="translatex(-10px)"/>
				  </Style>
			  </Style>
		  </Style>
		  
		  <Style Selector=":is(titlebars|LaminarTitleBar)[SidebarState=Expanded] :is(Button)#LaminarButton">
			  <Setter Property="IsHitTestVisible" Value="True"/>
			  <Style Selector="^ Image#LaminarLogo">
				  <Setter Property="RenderTransform" Value="translatex(2px)"/>
			  </Style>
			  <Style Selector="^ Path#CloseSidebarHint">
				  <Setter Property="RenderTransform" Value="translatex(-14px)"/>
				  <Setter Property="Opacity" Value="1"/>
			  </Style>
		  </Style>
		
		  <Style Selector=":is(titlebars|LaminarTitleBar)[SidebarState=Closed] :is(Button)#LaminarButton">
			  <Setter Property="IsHitTestVisible" Value="True"/>
			  <Style Selector="^ Image#LaminarLogo">
				  <Setter Property="RenderTransform" Value="translatex(-2px)"/>
			  </Style>
			  <Style Selector="^ Path#ExpandSidebarHint">
				  <Setter Property="RenderTransform" Value="translatex(15px)"/>
				  <Setter Property="Opacity" Value="1"/>
			  </Style>
		  </Style>
	  </StackPanel.Styles>
  </StackPanel>
</titlebars:LaminarTitleBar>
