<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:lc="using:Laminar.Avalonia.Commands">
    <ControlTheme x:Key="{x:Type lc:LaminarCommandSwitch}" TargetType="{x:Type lc:LaminarCommandSwitch}">
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Ellipse Width="30" Height="30" 
                             Stroke="{DynamicResource LaminarForeground}" StrokeThickness="3" 
                             HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Ellipse Name="IsCheckedIndicator"
                             Width="15" Height="15"
                             Fill="{DynamicResource LaminarForegroundEmphasis}"
                             HorizontalAlignment="Center" VerticalAlignment="Center"
                             Classes.Show="{TemplateBinding IsOn}">
                        <Ellipse.Styles>
                            <Style Selector="Ellipse">
                                <Setter Property="Opacity" Value="0"/>
                                <Setter Property="Transitions">
                                    <Transitions>
                                        <DoubleTransition Property="Opacity" Duration="{DynamicResource AnimationDuration}" Easing="{DynamicResource AnimationEasing}"/>
                                    </Transitions>
                                </Setter>
                                <Style Selector="^.Show">
                                    <Setter Property="Opacity" Value="1"/>
                                </Style>
                            </Style>
                        </Ellipse.Styles>
                    </Ellipse>
                </Panel>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
    
    <ControlTheme x:Key="{x:Type lc:LaminarCommandIcon}" TargetType="{x:Type lc:LaminarCommandIcon}">
        <Setter Property="Template">
            <ControlTemplate>
                <PathIcon Data="{TemplateBinding IconData}" 
                          VerticalAlignment="Center" HorizontalAlignment="Center"
                          Foreground="{DynamicResource LaminarForeground}"/>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
    
    <ControlTheme x:Key="LaminarToolIcon"
                  x:DataType="lc:LaminarToolInstance" 
                  TargetType="{x:Type Button}"
                  BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="IsHitTestVisible" Value="{Binding CanExecute}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Command" Value="{Binding Tool}"/>
        <Setter Property="CommandParameter" Value="{Binding Parameter}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Content">
            <Template>
                <Viewbox>
                    <ContentPresenter ContentTemplate="{Binding Tool.IconTemplate}"
                                      Content="{Binding}"/>
                </Viewbox>
            </Template>
        </Setter>
        <Setter Property="ToolTip.Tip">
            <Template>
                <StackPanel>
                    <TextBlock Classes="b2">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource FirstNotNullValueConverter}">
                                <Binding Path="Description"/>
                                <Binding Path="Tool.Name"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <TextBlock Classes="b2"
                               IsVisible="{Binding Tool.Gesture, Converter={x:Static ObjectConverters.IsNotNull}}">
                        Currently bound to <Run Classes="Emphasis" FontWeight="Normal" Text="{Binding Tool.Gesture}"/>
                    </TextBlock>
                    <TextBlock Classes="b2">Press <Run Classes="Emphasis" FontWeight="Normal" Text="{DynamicResource ChangeBindingGestureString}"/> to change binding</TextBlock>
                </StackPanel>
            </Template>
        </Setter>
        <Setter Property="Tag" Value="{Binding ChildTools, Converter={x:Static ObjectConverters.IsNotNull}}"/>
        <Style Selector="^[Tag=true]">
            <Setter Property="Flyout">
                <Flyout>
                    <MenuFlyoutPresenter ItemsSource="{Binding ChildTools}" Padding="0" CornerRadius="0"
                                         ItemContainerTheme="{DynamicResource LaminarMenuItem}" Margin="0" BorderThickness="0"/>
                </Flyout>
            </Setter>
        </Style>
        <Style Selector="^:is(Control).ArrowCursor">
            <Setter Property="Cursor" Value="Arrow"/>
        </Style>
    </ControlTheme>
    
    <DataTemplate x:Key="LaminarToolIconTemplate" x:DataType="{x:Type lc:LaminarToolInstance}">
        <Button Theme="{DynamicResource LaminarToolIcon}"/>
    </DataTemplate>
    
    <ControlTheme TargetType="{x:Type MenuItem}" x:Key="LaminarMenuItem" x:DataType="lc:LaminarToolInstance" 
                  BasedOn="{StaticResource {x:Type MenuItem}}">
        
        <Setter Property="Icon">
            <Template>
                <ContentPresenter Content="{Binding}"
                                  ContentTemplate="{Binding Tool.IconTemplate}"
                                  IsHitTestVisible="False"/>
            </Template>
        </Setter>
        <Setter Property="Header" Value="{Binding Tool.Name}"/>
        <Setter Property="InputGesture" Value="{Binding Tool.Gesture}"/>
        <Setter Property="ToolTip.Tip">
            <Template>
                <StackPanel>
                    <TextBlock Classes="b2" 
                               Text="{Binding  Description}" 
                               IsVisible="{Binding Description, Converter={x:Static ObjectConverters.IsNotNull}}"/>
                    <TextBlock Classes="b2">Press <Run FontWeight="Normal" Classes="Emphasis" Text="{DynamicResource ChangeBindingGestureString}"/> to change binding</TextBlock>
                </StackPanel>
            </Template>
        </Setter>
        <Setter Property="Command" Value="{Binding Tool}"/>
        <Setter Property="CommandParameter" Value="{Binding Parameter}"/>
        <Setter Property="IsEnabled" Value="{Binding CanExecute}"/>
    </ControlTheme>
</ResourceDictionary>
